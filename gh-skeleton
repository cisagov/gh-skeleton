#!/usr/bin/env bash
set -o nounset
set -o errexit
set -o pipefail

# Defaults
DEFAULT_BRANCH="develop"
DEST_ORG="cisagov"
SRC_ORG="cisagov"

# Define terminal colors for use in logger functions.
BLUE="\x1B[34m"
GREEN="\x1B[32m"
RED="\x1B[31m"
RESET="\x1B[0m"
YELLOW="\x1B[33m"

log_info() {
  echo -e "${BLUE}* $*${RESET}"
}

log_ok() {
  echo -e "${GREEN}✓ $*${RESET}"
}

log_warn() {
  echo -e "${YELLOW}⚠︎ $*${RESET}"
}

log_error() {
  echo -e "${RED}! $*${RESET}" >&2
}

# Determine if an executable is in the PATH
if ! type -p perl > /dev/null; then
  log_error "Perl not found on the system and is required."
  exit 1
fi

USAGE=$(
  cat << END_OF_LINE
GitHub CLI extension to start a new GitHub project from a skeleton GitHub repository.

Usage:
  gh skeleton (-h | --help)
  gh skeleton list [--src-org <name>]
  gh skeleton clone [options] <parent-repo-name> <new-repo-name>

Options:
  -c --change-dir <dir> Create clone in this directory.
  -d --dest-org <name>  Organization to create clone into [default: ${DEST_ORG}].
  -h --help             Show this message.
  -s --src-org <name>   Organization to search for skeletons [default: ${SRC_ORG}].
END_OF_LINE
)

print_available_skeletons() {
  src_org=$1
  QUERY="
  query {
    search(query: \"org:$src_org topic:skeleton archived:false\", type: REPOSITORY, first: 100) {
      repositoryCount
      edges {
        node {
          ... on Repository {
            name
            description
          }
        }
      }
    }
  }
  "

  # shellcheck disable=2016
  # Disable single quote expansion warning as we want to suppress
  # parameter expansion in a Go template.
  TEMPLATE='
    {{- range $repo := .data.search.edges -}}
      {{- printf "%-25s\t%s\n" $repo.node.name $repo.node.description -}}
    {{- end -}}
  '

  echo "Available skeletons in $src_org:"
  echo
  gh api graphql \
    --raw-field query="${QUERY}" --paginate \
    --template="${TEMPLATE}" | sort
}

# Function to read version files from .pre-commit-config.yaml
get_version_files() {
  # Check if .pre-commit-config.yaml exists
  if [[ ! -f ".pre-commit-config.yaml" ]]; then
    log_error ".pre-commit-config.yaml not found!"
    exit 1
  fi

  # Read the repository URL from .pre-commit-config.yaml
  log_info "Reading repository URL from .pre-commit-config.yaml"
  bump_version_repo_url=$(yq e '.repos[0].repo' .pre-commit-config.yaml)

  if [[ -z "$bump_version_repo_url" ]]; then
    log_error "Repository URL not found in .pre-commit-config.yaml!"
    exit 1
  fi

  # Define the path to the bump-version file in the repository
  bump_version_url="${bump_version_repo_url}/raw/develop/bump-version"

  # Download the bump-version.yaml file from the repository
  log_info "Downloading bump version file from ${bump_version_url}"
  curl -o bump-version.yaml "${bump_version_url}"

  if [[ ! -f "bump-version" ]]; then
    log_error "Failed to download bump-version.yaml file!"
    exit 1
  fi

  # Extract the list of version files from the VERSION_FILE variable in bump-version.yaml
  log_info "Reading VERSION_FILE from bump-version.yaml"
  yq e '.VERSION_FILE[]' bump-version
}

# Set INITIAL_VERSION to 0.0.1 by default unless provided
INITIAL_VERSION="${INITIAL_VERSION:-0.0.1}"

# Function to update the version in all specified files
update_version_in_files() {
  local new_version=$1
  local version_files=$(get_version_files)  # Assume this function fetches version files

  for file in $version_files; do
    if [[ -f "$file" ]]; then
      log_info "Updating version in $file"
      perl -pi -e "s/(version[:=]?\s*)[^\s\"']+/\\1$new_version/g" "$file"
    else
      log_warn "$file not found, skipping."
    fi
  done

  log_info "Staging updated files."
  git add --verbose .

  log_info "Committing updated version files."
  git commit --message "Set initial version to $new_version"
}

# Call the update_version_in_files function with INITIAL_VERSION
log_info "Updating the initial version to $INITIAL_VERSION in all relevant files."
update_version_in_files "$INITIAL_VERSION"


clone_repo() {
  src_repo=$1
  dest_repo=$2
  src_org=$3
  dest_org=$4

  # Before we continue check to see if the user is logged in. If there is no
  # currently authenticated user gh will ask the user to run the "gh auth login"
  # command and exit with return code 4.  This will cause this script to halt.
  username=$(gh api user --jq '.login')

  # If we got here we know we have an authenticated user.
  log_ok "You are logged into GitHub as ${username}."

  log_info "Creating ${dest_org}/${dest_repo} from skeleton ${src_org}/${src_repo}."

  log_info "Cloning skeleton remote repository to the new local repository."
  git clone --origin "${src_repo}" git@github.com:"${src_org}/${src_repo}".git "${dest_repo}"

  log_info "Adding a new remote origin for the repository."
  git -C "${dest_repo}" remote add origin git@github.com:"${dest_org}/${dest_repo}".git

  log_info "Setting base repository for pull request and issue creation."
  # TODO: Replace with a gh command when it is implemented.
  # See: https://github.com/cli/cli/issues/2300
  git -C "${dest_repo}" config --local --add "remote.origin.gh-resolved" "base"

  cd "${dest_repo}"

  log_info "Disabling pushing to the upstream (parent) repository."
  git remote set-url --push "${src_repo}" no_push

  log_info "Searching and replacing repository name in source files."
  find . -path './.git' -prune -o -not -path './.github/dependabot.yml' -type f \
    -exec perl -pi -e "s/${src_org}\/${src_repo}/${dest_org}\/${dest_repo}/g" {} \; \
    -exec perl -pi -e "s/${src_repo}/${dest_repo}/g" {} \;

  log_info "Staging modified files."
  git add --verbose .

  log_info "Committing staged files to the ${DEFAULT_BRANCH} branch."
  git commit --message "Rename repository references after clone"

  log_info "Creating the lineage.yml file."
  cat << END_OF_LINE > .github/lineage.yml
---
lineage:
  skeleton:
    remote-url: https://github.com/${src_org}/${src_repo}.git
version: '1'
END_OF_LINE

  log_info "Staging modified files."
  git add --verbose .

  log_info "Committing staged files to the ${DEFAULT_BRANCH} branch."
  git commit --message "Add lineage configuration"

  log_info "Creating first-commits branch."
  git checkout -b first-commits

  remote_repo_status="unknown"
  log_info "Checking for remote repository ${dest_org}/${dest_repo}."
  remote_repo_name=$(gh repo view --json name --jq ".name" "${dest_org}/${dest_repo}") || :
  if [[ -n ${remote_repo_name} ]]; then
    log_ok "${dest_org}/${dest_repo} exists."
    remote_repo_status="exists"
  else
    log_warn "${dest_org}/${dest_repo} does not yet exist."
    log_info "Attempting to create a new remote repository."
    remote_repo_status="created"
    gh repo create --public "${dest_org}/${dest_repo}" || remote_repo_status="failed"
  fi

  # Handle the different outcomes of the remote repository.
  case $remote_repo_status in
    created)
      log_ok "The remote repository ${dest_org}/${dest_repo} was successfully created."
      ;;&
    exists)
      log_info "The remote repository ${dest_org}/${dest_repo} already existed."
      ;;&
    created | exists)
      log_info "Pushing ${DEFAULT_BRANCH}, first-commits to the remote."
      git push origin "${DEFAULT_BRANCH}" --set-upstream
      git push origin first-commits --set-upstream
      
      log_info "Opening a new pull request for the first-commits branch."
      gh pr create --title "First commits" --assignee=@me --web
      ;;
    failed)
      log_warn "The remote repository ${dest_org}/${dest_repo} could not be created."
      cat << END_OF_LINE
${dest_org}/${dest_repo} was created locally from the ${src_repo} skeleton.
A remote repository was unable to be created automatically.
Please manually create the ${dest_org}/${dest_repo} repository on GitHub.

Once ${dest_org}/${dest_repo} is created use the following commands to push
the local repository to the remote and create the initial pull request:
    cd ${CHANGE_DIR:+${CHANGE_DIR}/}${dest_repo}
    git push origin ${DEFAULT_BRANCH} first-commits --set-upstream
    gh pr create --title "First commits" --assignee=@me --web

END_OF_LINE
      exit 255
      ;;
  esac
}

configure_repo_options() {
  dest_repo=$1
  dest_org=$2
  branch=$3

  log_info "Configuring repository options for ${dest_org}/${dest_repo}."

  jq -n "{
      allow_auto_merge: false,
      allow_merge_commit: true,
      allow_rebase_merge: true,
      allow_squash_merge: false,
      default_branch: \"${branch}\",
      delete_branch_on_merge: true,
      private: false,
      visibility: \"public\"
    }" | gh api "/repos/${dest_org}/${dest_repo}" --method PATCH --input - 1> /dev/null
}

configure_branch_protection() {
  dest_repo=$1
  dest_org=$2
  branch=$3

  # Organizations have a different API than personal accounts.
  # Determine what dest_org is pointing at and route to the appropriate function.

  log_info "Determining organization type for $dest_org."
  is_real_org=true
  gh api "/orgs/$dest_org" --silent 2> /dev/null || is_real_org=false
  if [ $is_real_org = true ]; then
    log_ok "Organization $dest_org is a true organization."
    configure_org_branch_protection "$dest_repo" "$dest_org" "$branch"
  else
    log_ok "Organization $dest_org is a personal account."
    configure_user_branch_protection "$dest_repo" "$dest_org" "$branch"
  fi
}

configure_org_branch_protection() {
  dest_repo=$1
  dest_org=$2
  branch=$3

  # Note: Only organization repositories can have users and team restrictions.

  log_info "Configuring organization branch protection for ${dest_org}/${dest_repo}/${branch}."

  jq -n "{
      enforce_admins: true,
      required_conversation_resolution: true,
      required_pull_request_reviews: {
        dismiss_stale_reviews: false,
        dismissal_restrictions: {
          teams: [],
          users: []
        },
        require_code_owner_reviews: true,
        required_approving_review_count: 2
      },
      required_status_checks: {
        checks: [
          {
            context: \"lint\"
          }
        ],
        strict: true
      },
      restrictions: {
        apps: [],
        teams: [],
        users: []
      }
    }" | gh api "/repos/${dest_org}/${dest_repo}/branches/${branch}/protection" --method PUT --input - 1> /dev/null
}

configure_user_branch_protection() {
  dest_repo=$1
  dest_org=$2
  branch=$3

  log_info "Configuring user branch protection for ${dest_org}/${dest_repo}/${branch}."

  jq -n "{
      enforce_admins: true,
      required_conversation_resolution: true,
      required_pull_request_reviews: {
        dismiss_stale_reviews: false,
        require_code_owner_reviews: true,
        required_approving_review_count: 2
      },
      required_status_checks: {
        checks: [
          {
            context: \"lint\"
          }
        ],
        strict: true
      },
      restrictions: null
    }" | gh api "/repos/${dest_org}/${dest_repo}/branches/${branch}/protection" --method PUT --input - 1> /dev/null
}

################################################################################
# Script execution begins here.
################################################################################

# Initialize positional parameters and flag variables.
CHANGE_DIR=""
PARAMS=""

# If there are no arguments then print the usage and exit.
if [ $# -eq 0 ]; then
  echo "${USAGE}"
  exit 0
fi

# Parse command line arguments.
while (("$#")); do
  case "$1" in
    -c | --change-dir)
      CHANGE_DIR="$2"
      shift
      ;;
    -d | --dest-org)
      DEST_ORG="$2"
      shift
      ;;
    -h | --help)
      echo "${USAGE}"
      exit 0
      ;;
    -s | --src-org)
      SRC_ORG="$2"
      shift
      ;;
    -*) # Handle unsupported flags.
      echo "Error: Unsupported skeleton flag $1" >&2
      exit 255
      ;;
    *) # Preserve positional arguments.
      PARAMS="$PARAMS $1"
      ;;
  esac
  shift
done

# Set positional arguments in their proper place.
eval set -- "$PARAMS"

case "$1" in
  clone)
    if [[ $# -lt 3 ]]; then
      echo "Clone command requires <parent-repo-name> <new-repo-name>"
      echo
      echo "${USAGE}"
      exit 255
    fi
    if [[ -n ${CHANGE_DIR} ]]; then
      pushd "${CHANGE_DIR}" 1> /dev/null
      clone_repo "$2" "$3" "${SRC_ORG}" "${DEST_ORG}"
      popd 1> /dev/null
    else
      clone_repo "$2" "$3" "${SRC_ORG}" "${DEST_ORG}"
    fi
    configure_repo_options "$3" "${DEST_ORG}" "${DEFAULT_BRANCH}"
    configure_branch_protection "$3" "${DEST_ORG}" "${DEFAULT_BRANCH}"
    log_ok "Success!"
    ;;
  list)
    print_available_skeletons "${SRC_ORG}"
    ;;
  *)
    echo "Unknown command $1"
    echo "${USAGE}"
    exit 255
    ;;
esac
